# Plone Production configuration file
[buildout]

extends =
    base.cfg
    checkouts.cfg
    sources.cfg
    custom-settings.cfg
    hotfix.cfg
    maintenance.cfg
    production-kgv.cfg
    munin-install.cfg
    munin-zope.cfg
    munin-plone.cfg
    munin-haproxy.cfg
    munin-varnish.cfg
    munin-nginx.cfg

parts +=
#    mount-points-zodb
    zeoserver
    client2
    client-debug
    sitecustomize-base
    client1-sitecustomize
    client2-sitecustomize
    client-debug-sitecustomize
    nginx-config
    nginx-vhost-conf
    pcre
    varnish-build
    varnish-config
    varnish
    varnishlog
    haproxy-build
    haproxy-config
    supervisor
    supervisor-crontab
    os-config
#    atcontenttypes-conf
#    plone-site

##############################################################################
#  Configurations.
##############################################################################

# This recipe aids the creation and management of multiple Zope2 FileStorages
# For options see http://pypi.python.org/pypi/collective.recipe.filestorage
[mount-points-zodb]
recipe = collective.recipe.filestorage
parts =
    web
zeo = zeoserver
zopes =
    client1
    client2
    client-debug
location = ${buildout:directory}/var/filestorage/%(fs_part_name)s/Data.fs
zodb-cache-size = ${buildout:zodb-cache-size}
# Basic ZEO storage
zeo-address = ${zeoserver:zeo-address}
# Advanced ZEO options
zeo-client-cache-size = 300MB

[zeoserver]
# Customization
eggs +=
    redturtle.catalogmount

[client2]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client2}:${ports:client2}
port-base             = 1
# Put the log, pid, loc files in var/client2
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

# Zeo client instance for debugging
[client-debug]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client-debug}:${ports:client-debug}
port-base             = 2
debug-mode            = on
verbose-security      = on
zodb-cache-size       = 5000
# Put the log, pid, loc files in var/client-debug
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock
#zope-conf-additional = <zodb_db web>
#    cache-size ${buildout:zodb-cache-size}
#    <zeoclient>
#      server ${site-settings:localhost}:${ports:zeoserver}
#      storage web
#      name web_zeostorage
#      var ${buildout:directory}/parts/${:_buildout_section_name_}/var
#      cache-size 300MB
#    </zeoclient>
#    mount-point /web
#    </zodb_db># Zeo client instance for debugging

[client1-sitecustomize]
<= sitecustomize-base
output = ${client1:location}/sitecustomize.py

[client2-sitecustomize]
<= sitecustomize-base
output = ${client2:location}/sitecustomize.py

[client-debug-sitecustomize]
<= sitecustomize-base
output = ${client-debug:location}/sitecustomize.py

# This recipe generates Nginx Web Server configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx.conf.in
output = ${buildout:directory}/etc/nginx.conf
worker_processes = ${nginx:worker_processes}
worker_connections = ${nginx:worker_connections}

# This recipe generates VirtualHost Nginx Web Server configuration
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-vhost-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx-vhost.conf.in
output = ${buildout:directory}/etc/nginx-vhost.conf

# A dependency for build Varnish
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[pcre]
recipe = hexagonit.recipe.cmmi
url = ${downloads:pcre}
keep-compile-dir = true

# Varnish, acting as a reverse lookup caching proxy
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
   --with-pcre=${pcre:location}/../pcre__compile__/pcre-8.31

# This recipe generates Varnish configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnish-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/varnish.vcl.in
output = ${buildout:directory}/etc/varnish.vcl

# This recipe help to install Varnish.
# For options see http://pypi.python.org/pypi/plone.recipe.varnish
[varnish]
recipe = plone.recipe.varnish
daemon = ${varnish-build:location}/sbin/varnishd
mode = ${varnish-settings:mode}
bind = ${hosts:varnish}:${ports:varnish}
cache-size = ${varnish-settings:cache-size}
config = ${buildout:directory}/etc/varnish.vcl

# This recipe generates a bash script for varnishlog command
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnishlog]
recipe = collective.recipe.template
input = inline:
    ${varnish-build:location}/bin/varnishlog
output = ${buildout:bin-directory}/varnishlog
mode = 755

# HAProxy, used as a load haproxy over the two Zope instances
# For options see http://pypi.python.org/pypi/plone.recipe.haproxy
[haproxy-build]
recipe = plone.recipe.haproxy
url = ${downloads:haproxy}
cpu = ${build:cpu}
target = ${build:target}
pcre = 1

# This recipe generates HAProxy configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[haproxy-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/haproxy.conf.in
output = ${buildout:directory}/etc/haproxy.conf
maxconn = ${haproxy-settings:maxconn}
ulimit-n = ${haproxy-settings:ulimit-n}

##############################################################################
# Supervisor
##############################################################################

# This recipe help to install Supervisor, one to rule them all
# For options see http://pypi.python.org/pypi/collective.recipe.supervisor
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
user = ${supervisor-settings:user}
password = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
loglevel = info
logfile = ${buildout:directory}/var/log/supervisord.log
logfile_maxbytes = 50MB
logfile_backups = 10
pidfile = ${buildout:directory}/var/supervisord.pid
file = ${buildout:directory}/var/supervisord.sock
chmod = 0700
nodaemon = false
#plugins = superlance
programs =
#  Prio Name      Program                                      Params
   10   zeoserver ${buildout:bin-directory}/zeoserver	[foreground]	${zeoserver:location} 	true
   20   client1 ${buildout:bin-directory}/client1	[console] ${client1:location}	true
   20   client2 ${buildout:bin-directory}/client2	[console] ${client2:location}	true
   30   haproxy ${buildout:bin-directory}/haproxy [-f ${haproxy-config:output} -db] true
   40   varnish ${buildout:bin-directory}/varnish			true

eventlisteners =
# Check every 60 seconds that no child process has exceeded. it's like a RSS memory quota
#    MemoryMonitor TICK_60 ${buildout:bin-directory}/memmon [-g zeo-clients=${quotas:instance-memory} -m ${site-settings:mail-for-errors}]
# Check every 60 seconds whether the plone instance is alive
#    HttpOk1 TICK_60 ${buildout:bin-directory}/httpok [-p client1 -t 20 http://${hosts:client1}:${ports:client1}/${site-settings:site-id}]
#    HttpOk2 TICK_60 ${buildout:bin-directory}/httpok [-p client2 -t 20 http://${hosts:client2}:${ports:client2}/${site-settings:site-id}]

groups =
    10 zeo-cluster zeoserver
    20 zeo-clients client1,client2
    30 others haproxy,varnish
#    40 httpok HttpOk1,HttpOk2

# This recipe help to Run once Supervisor, at startup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[supervisor-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @reboot
command = ${buildout:bin-directory}/supervisord

# Helper script to update Services configurations into Operative System
# For options see http://pypi.python.org/pypi/collective.recipe.template
[os-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/update-so-config.sh.in
output = ${buildout:bin-directory}/update-so-config.sh
mode = 700

# This recipe helps to generate an ATContentTypes configuration file
# in the etc/ folder of a zope instance
# For options see http://pypi.python.org/pypi/plone.recipe.atcontenttypes
[atcontenttypes-conf]
recipe = plone.recipe.atcontenttypes

# The path(s) where your zope instance(s) is(are) installed.
# If you are also using the plone.recipe.zope2instance recipe (like the second example above),
# and you have that configured as a part called 'instance' prior to the atcontenttypes part,
# you can use ${instance:location} for this parameter.
zope-instance-location =
    ${client1:location}
    ${client2:location}
    ${client-debug:location}

# allow files up to 1024kb, for example
max-file-size =
    ATImage:${quotas:image}
    ATFile:${quotas:file}
    ATNewsItem:${quotas:newsitem}

# This option let you set the maximum image dimension ("w, h"). "0,0" means no rescaling of the original image.
max-image-dimension =
    ATNewsItem:${quotas:max-image-dimension-newsitem}
    ATImage:${quotas:max-image-dimension}

# This option affects the quality images get saved with.
pil-quality = ${quotas:pil-image-quality}

# This recipe helps create a Plone web site with his policy
# For options see http://pypi.python.org/pypi/collective.recipe.plonesite
#
[plone-site]
recipe = collective.recipe.plonesite
site-id = ${site-settings:site-id}
instance = client1
zeoserver = zeoserver
profiles = canaimagnulinux.web.policy:default
