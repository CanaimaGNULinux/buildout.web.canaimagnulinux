[buildout]

extends =
    base.cfg
    custom-settings.cfg
    hotfix.cfg
    production-kgv.cfg
    munin-install.cfg
    munin-zope.cfg
    munin-plone.cfg
    munin-haproxy.cfg
    munin-varnish.cfg
    munin-nginx.cfg

parts +=
#    mount-points-zodb
    zeoserver
    instance
    instance2
    instance-debug
#    instance-sitecustomize
#    instance2-sitecustomize
#    instance-debug-sitecustomize
    nginx-config
    nginx-vhost-conf
    pcre
    varnish-build
    varnish-config
    varnish
    varnishlog
    haproxy-build
    haproxy-config
    supervisor
    supervisor-crontab
    logrotate-config
    logrotate-crontab
    os-config
    backup
    backup-qa
    backup-daily-crontab
    backup-weekly-crontab
    backup-full-weekly-crontab
    maintenance-schedule-crontab
#    move-backup
#    move-backup-snapshot
#    move-backup-crontab
#    move-backup-snapshot-crontab
    atcontenttypes-conf
    plone-site

# Zope, Varnish and Nginx URLs download versions to be used
[downloads]
#zope = ${versions:zope2-url}
pcre = http://download.sf.net/project/pcre/pcre/8.31/pcre-8.31.tar.gz
haproxy = http://dist.jarn.com/public/haproxy-1.4.18.zip
varnish = http://dist.jarn.com/public/varnish-2.1.5.tar.gz
nginx = http://nginx.org/download/nginx-1.5.3.tar.gz

##############################################################################
#  Configurations.
##############################################################################

# Plone Website names using for virtual hosting configurations
[plone-sites]
main = ${site-settings:site-id}

# System users who are assigned the services
[users]
zope = ${site-settings:user-server}

# This recipe aids the creation and management of multiple Zope2 FileStorages
# For options see http://pypi.python.org/pypi/collective.recipe.filestorage
[mount-points-zodb]
recipe = collective.recipe.filestorage
parts =
    web
zeo = zeoserver
zopes =
    instance
    instance2
    instance-debug
location = ${buildout:directory}/var/filestorage/%(fs_part_name)s/Data.fs
zodb-cache-size = ${buildout:zodb-cache-size}
# Basic ZEO storage
zeo-address = ${zeoserver:zeo-address}
# Advanced ZEO options
zeo-client-cache-size = 300MB

# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
[zeoserver]
recipe = plone.recipe.zeoserver
#zope2-location = ${zope2:location}
# Process
zeo-address = ${hosts:zeoserver}:${ports:zeoserver}
zeo-var = ${buildout:directory}/var

# Storage
#blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs =
#    plone.app.blob

# Packing
pack-days = ${maintenance:pack-day}

# Default settings for ZEO clients.
# ZEO clients basic configurations.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[instance]
# Common options
http-address = ${hosts:instance}:${ports:instance}
zserver-threads = ${instance:zserver_threads}
zodb-cache-size = ${buildout:zodb-cache-size}

eggs +=
    ${buildout:eggs}
    ${products-extra:eggs}
zcml +=
    ${products-extra:zcml}

# Basic ZEO storage
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
user = ${site-settings:instance_username}:${site-settings:instance_password}
#blob-storage = ${zeoserver:zeo-var}/blobstorage
#shared-blob = on

# Advanced ZEO options
zeo-client-cache-size = 300MB

# Debug mode
debug-mode = off
verbose-security = off
deprecation-warnings = off
security-policy-implementation = python

# Logging
# Put the log, pid, loc files in var/instance
event-log = ${buildout:directory}/var/instance/event.log
z2-log = ${buildout:directory}/var/instance/Z2.log
pid-file = ${buildout:directory}/var/instance/instance.pid
lock-file = ${buildout:directory}/var/instance/instance.lock

#copied from http://stackoverflow.com/questions/5993334/error-notification-on-plone-4
mailinglogger =
    <mailing-logger>
      level error
      flood-level 10
      smtp-server ${site-settings:mail-smtp-url}
      from ${site-settings:mail-logger}
      to ${site-settings:mail-for-errors}
      subject [Error en ${site-settings:domain-name-production}] [%(hostname)s] %(line)s
    </mailing-logger>

# Load non-setuptools compatible Python libraries
products =
    ${buildout:directory}/products/

# For options see http://pypi.python.org/pypi/collective.recipe.zope2cluster
[instance2]
<= instance
http-address = ${hosts:instance2}:${ports:instance2}
# Put the log, pid, loc files in var/instance2
event-log = ${buildout:directory}/var/instance2/event.log
z2-log = ${buildout:directory}/var/instance2/Z2.log
pid-file = ${buildout:directory}/var/instance2/instance2.pid
lock-file = ${buildout:directory}/var/instance2/instance2.lock

# Zeo client instance for debugging
[instance-debug]
<= instance
http-address = ${hosts:instance-debug}:${ports:instance-debug}
debug-mode = on
verbose-security = on
# Put the log, pid, loc files in var/instance-debug
event-log = ${buildout:directory}/var/instance-debug/event.log
z2-log = ${buildout:directory}/var/instance-debug/Z2.log
pid-file = ${buildout:directory}/var/instance-debug/instance-debug.pid
lock-file = ${buildout:directory}/var/instance-debug/instance-debug.lock
zope-conf-additional = <zodb_db qa>
    cache-size ${buildout:zodb-cache-size}
    <zeoclient>
      server ${site-settings:localhost}:${ports:zeoserver}
      storage qa
      name qa_zeostorage
      var ${buildout:directory}/parts/instance-debug/var
      cache-size 300MB
    </zeoclient>
    mount-point /qa
    </zodb_db>

# This recipe help to enabled encoding to utf-8.
# For options see http://pypi.python.org/pypi/collective.recipe.template
[instance-sitecustomize]
recipe = collective.recipe.template
inline =
    import sys
    sys.setdefaultencoding('utf-8')
output = ${buildout:bin-directory}/sitecustomize.py
mode = 644

[instance2-sitecustomize]
<= instance-sitecustomize
output = ${instance2:location}/sitecustomize.py

[instance-debug-sitecustomize]
<= instance-sitecustomize
output = ${instance-debug:location}/sitecustomize.py

# This recipe generates Nginx Web Server configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx.conf.in
output = ${buildout:directory}/etc/nginx.conf
worker_processes = ${nginx:worker_processes}
worker_connections = ${nginx:worker_connections}

# This recipe generates VirtualHost Nginx Web Server configuration
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-vhost-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx-vhost.conf.in
output = ${buildout:directory}/etc/nginx-vhost.conf

# A dependency for build Varnish
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[pcre]
recipe = hexagonit.recipe.cmmi
url = ${downloads:pcre}
keep-compile-dir = true

# Varnish, acting as a reverse lookup caching proxy
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
   --with-pcre=${pcre:location}/../pcre__compile__/pcre-8.31

# This recipe generates Varnish configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnish-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/varnish.vcl.in
output = ${buildout:directory}/etc/varnish.vcl

# This recipe help to install Varnish.
# For options see http://pypi.python.org/pypi/plone.recipe.varnish
[varnish]
recipe = plone.recipe.varnish
daemon = ${varnish-build:location}/sbin/varnishd
mode = ${varnish-settings:mode}
bind = ${hosts:varnish}:${ports:varnish}
cache-size = ${varnish-settings:cache-size}
config = ${buildout:directory}/etc/varnish.vcl

# This recipe generates a bash script for varnishlog command
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnishlog]
recipe = collective.recipe.template
input = inline:
    ${varnish-build:location}/bin/varnishlog
output = ${buildout:bin-directory}/varnishlog
mode = 755

# HAProxy, used as a load haproxy over the two Zope instances
# For options see http://pypi.python.org/pypi/plone.recipe.haproxy
[haproxy-build]
recipe = plone.recipe.haproxy
url = ${downloads:haproxy}
cpu = ${build:cpu}
target = ${build:target}
pcre = 1

# This recipe generates HAProxy configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[haproxy-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/haproxy.conf.in
output = ${buildout:directory}/etc/haproxy.conf
maxconn = ${haproxy-settings:maxconn}
ulimit-n = ${haproxy-settings:ulimit-n}

##############################################################################
# Supervisor
##############################################################################

# This recipe help to install Supervisor, one to rule them all
# For options see http://pypi.python.org/pypi/collective.recipe.supervisor
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
user = ${supervisor-settings:user}
password = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
loglevel = info
logfile = ${buildout:directory}/var/log/supervisord.log
logfile_maxbytes = 50MB
logfile_backups = 10
pidfile = ${buildout:directory}/var/supervisord.pid
file = ${buildout:directory}/var/supervisord.sock
chmod = 0700
nodaemon = false
#plugins = superlance
programs =
#  Prio Name      Program                                      Params
   10   zeoserver ${buildout:bin-directory}/zeoserver	[foreground]	${zeoserver:location} 	true
   20   instance ${buildout:bin-directory}/instance	[console] ${instance:location}	true
   20   instance2 ${buildout:bin-directory}/instance2	[console] ${instance2:location}	true
   30   haproxy ${buildout:bin-directory}/haproxy [-f ${haproxy-config:output} -db] true
   40   varnish ${buildout:bin-directory}/varnish			true

eventlisteners =
# Check every 60 seconds that no child process has exceeded. it's like a RSS memory quota
#    MemoryMonitor TICK_60 ${buildout:bin-directory}/memmon [-g zeo-clients=${quotas:instance-memory} -m ${site-settings:mail-for-errors}]
# Check every 60 seconds whether the plone instance is alive
#    HttpOk1 TICK_60 ${buildout:bin-directory}/httpok [-p instance -t 20 http://${hosts:instance}:${ports:instance}/${plone-sites:main}]
#    HttpOk2 TICK_60 ${buildout:bin-directory}/httpok [-p instance2 -t 20 http://${hosts:instance2}:${ports:instance2}/${plone-sites:main}]

groups =
    10 zeo-cluster zeoserver
    20 zeo-clients instance,instance2
    30 others haproxy,varnish
#    40 httpok HttpOk1,HttpOk2

# This recipe help to Run once Supervisor, at startup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[supervisor-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @reboot
command = ${buildout:bin-directory}/supervisord

##############################################################################
# logs
##############################################################################

# This recipe generates logrotate configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[logrotate-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/logrotate.conf.template
output = ${buildout:directory}/etc/logrotate.conf

# This recipe to install a schedule task to run logrotate
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[logrotate-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @daily
command = /usr/sbin/logrotate -s ${buildout:directory}/var/logrotate.status ${logrotate-config:output}

################################################################################
# maintenance and backup
################################################################################

# Helper script to update Services configurations into Operative System
# For options see http://pypi.python.org/pypi/collective.recipe.template
[os-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/update-so-config.sh.in
output = ${buildout:bin-directory}/update-so-config.sh
mode = 700

# For options see http://pypi.python.org/pypi/collective.recipe.backup
[backup]
recipe = collective.recipe.backup
# Keep the last 4 backups
keep = 4
# Gzip it
gzip = true
# Location where backups are stored.
location = /home/backup/backups
# Location where snapshot backups of the filestorage are stored. 
snapshotlocation = /home/backup/snapshotbackups

# For options see http://pypi.python.org/pypi/collective.recipe.backup
[backup-qa]
recipe = collective.recipe.backup
# Keep the last 4 backups
keep = 4
# Gzip it
gzip = true
# Advanced usage: multiple Data.fs files
additional_filestorages =
    qa ${buildout:directory}/var/filestorage/qa/Data.fs

# This recipe to install a schedule task to makes an incremental backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-daily-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 0-6
command = ${buildout:bin-directory}/backup

# This recipe to install a schedule task to makes a full backup, separate 
# from the regular backups. Handy for copying the current production database 
# to your laptop or right before a big change in the site.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-weekly-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 7
command = ${buildout:bin-directory}/snapshotbackup

# This recipe to install a schedule task to makes always makes a full backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-full-weekly-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 7
command = ${buildout:bin-directory}/fullbackup

# This recipe to install a schedule task to makes once a week, to remove 
# unused objects from your Zope Data.fs.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[maintenance-schedule-crontab]
recipe = z3c.recipe.usercrontab
times = 0 3 * * 7
command = ${buildout:bin-directory}/zeopack

# This recipe to move backup to others directory or server
# For options see http://pypi.python.org/pypi/collective.recipe.rsync
#[move-backup]
#recipe = collective.recipe.rsync
#source = ${site-settings:user-server}@${site-settings:domain-name-production}:${backup:location}/*
#target = /home/backup/
#script = true
#port = 22000

# This recipe to move snapshot backup to others directory or server
# For options see http://pypi.python.org/pypi/collective.recipe.rsync
#[move-backup-snapshot]
#recipe = collective.recipe.rsync
#source = ${site-settings:user-server}@${site-settings:domain-name-production}:${backup:snapshotlocation}/*
#target = /home/backup/
#script = true
#port = 22000

# This recipe to install a schedule task to move backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
#[move-backup-crontab]
#recipe = z3c.recipe.usercrontab
#times = 0 4 * * 7
#command = ${buildout:bin-directory}/move-backup

# This recipe to install a schedule task to move snapshot backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
#[move-backup-snapshot-crontab]
#recipe = z3c.recipe.usercrontab
#times = 0 4 * * 7
#command = ${buildout:bin-directory}/move-backup-snapshot

# This recipe helps to generate an ATContentTypes configuration file
# in the etc/ folder of a zope instance
# For options see http://pypi.python.org/pypi/plone.recipe.atcontenttypes
[atcontenttypes-conf]
recipe = plone.recipe.atcontenttypes

# The path(s) where your zope instance(s) is(are) installed.
# If you are also using the plone.recipe.zope2instance recipe (like the second example above),
# and you have that configured as a part called 'instance' prior to the atcontenttypes part,
# you can use ${instance:location} for this parameter.
zope-instance-location =
    ${instance:location}
    ${instance2:location}
    ${instance-debug:location}

# allow files up to 1024kb, for example
max-file-size =
    ATImage:${quotas:image}
    ATFile:${quotas:file}
    ATNewsItem:${quotas:newsitem}

# This option let you set the maximum image dimension ("w, h"). "0,0" means no rescaling of the original image.
max-image-dimension =
    ATNewsItem:${quotas:max-image-dimension-newsitem}
    ATImage:${quotas:max-image-dimension}

# This option affects the quality images get saved with.
pil-quality = ${quotas:pil-image-quality}

# This recipe helps create a Plone web site with his policy
# For options see http://pypi.python.org/pypi/collective.recipe.plonesite
#
[plone-site]
recipe = collective.recipe.plonesite
site-id = ${site-settings:site-id}
instance = instance
zeoserver = zeoserver
#profiles = canaimagnulinux.web.policy
